// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package net.bigeon.mcdas.aggregator;

/*-
 * #%L
 * aggregator
 * %%
 * Copyright (C) 2019 Bigeon
 * %%
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * 
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * 
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * 
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 * #L%
 */

import java.time.LocalDateTime;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.bigeon.mcdas.data.DataPoint;

/************************************************************/
/** A simplistic implementation of the cache. */
public class SingleCache implements Cache, DataSource {
    /** The points saved in the cache */
    public Deque<DataPoint>           points    = new ArrayDeque<>();
    private final Set<CacheListener>  listeners = new HashSet<>();
    private final List<LocalDateTime> locks     = new ArrayList<>();
    private DataPoint                 last;

    /** Add a new point in the cache.
     *
     * @param data the data */
    public void add(DataPoint data) {
        if (last != null) {
            for (LocalDateTime localDateTime : locks) {
                if (localDateTime.isBefore(data.date)) {
                    points.push(data);
                    break;
                }
            }
        }
        last = data;
        listeners.forEach((CacheListener l) -> l.addedData(this));
    }

    /** Add a listener
     *
     * @param listener the listener */
    public void addListener(CacheListener listener) {
        listeners.add(listener);
    }

    /* (non-Javadoc)
     * @see net.bigeon.mcdas.aggregator.Cache#flush() */
    @Override
    public void flush() {
        points.clear();
        listeners.forEach((CacheListener l) -> l.flushed(this));
    }

    /* (non-Javadoc)
     * @see net.bigeon.mcdas.aggregator.DataSource#get(java.time.LocalDateTime) */
    @Override
    public DataPoint get(LocalDateTime date) {
        DataPoint select = null;
        if (!last.date.isBefore(date)) {
            select = last;
        }
        for (DataPoint dataPoint : points) {
            if (dataPoint.date.isAfter(date)) {
                if (select == null || !select.date.isBefore(dataPoint.date)) {
                    select = dataPoint;
                }
            }
        }
        return select;
    }

    /* (non-Javadoc)
     * @see net.bigeon.mcdas.aggregator.Cache#lock(java.time.LocalDateTime) */
    @Override
    public void lock(LocalDateTime from) {
        locks.add(from);
    }

    /* (non-Javadoc)
     * @see net.bigeon.mcdas.aggregator.Cache#release(java.time.LocalDateTime) */
    @Override
    public void release(LocalDateTime lock) {
        locks.remove(lock);
    }

    /** Remove a listener.
     *
     * @param updater the listener */
    public void removeListener(CacheListener updater) {
        listeners.remove(updater);
    }
}
